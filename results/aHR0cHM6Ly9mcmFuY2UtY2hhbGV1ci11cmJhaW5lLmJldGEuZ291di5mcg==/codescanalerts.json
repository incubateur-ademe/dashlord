{"totalCount":2,"grade":"D","repositories":[{"url":"https://github.com/betagouv/france-chaleur-urbaine/","grade":"D","alerts":[{"number":29,"created_at":"2025-09-25T13:18:53Z","updated_at":"2025-09-25T13:18:53Z","url":"https://api.github.com/repos/betagouv/france-chaleur-urbaine/code-scanning/alerts/29","html_url":"https://github.com/betagouv/france-chaleur-urbaine/security/code-scanning/29","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/cors-permissive-configuration","severity":"warning","description":"Permissive CORS configuration","name":"js/cors-permissive-configuration","tags":["external/cwe/cwe-942","security"],"full_description":"Cross-origin resource sharing (CORS) policy allows overly broad access.","help":"# Permissive CORS configuration\nA server can use CORS (Cross-Origin Resource Sharing) to relax the restrictions imposed by the Same-Origin Policy, allowing controlled, secure cross-origin requests when necessary.\n\nA server with an overly permissive CORS configuration may inadvertently expose sensitive data or enable CSRF attacks, which allow attackers to trick users into performing unwanted operations on websites they're authenticated to.\n\n\n## Recommendation\nWhen the `origin` is set to `true`, the server accepts requests from any origin, potentially exposing the system to CSRF attacks. Use `false` as the origin value or implement a whitelist of allowed origins instead.\n\nWhen the `origin` is set to `null`, it can be exploited by an attacker who can deceive a user into making requests from a `null` origin, often hosted within a sandboxed iframe.\n\nIf the `origin` value is user-controlled, ensure that the data is properly sanitized and validated against a whitelist of allowed origins.\n\n\n## Example\nIn the following example, `server_1` accepts requests from any origin because the value of `origin` is set to `true`. `server_2` uses user-controlled data for the origin without validation.\n\n\n```javascript\nimport { ApolloServer } from 'apollo-server';\nvar https = require('https'),\n    url = require('url');\n\nvar server = https.createServer(function () { });\n\nserver.on('request', function (req, res) {\n    // BAD: origin is too permissive\n    const server_1 = new ApolloServer({\n        cors: { origin: true }\n    });\n\n    let user_origin = url.parse(req.url, true).query.origin;\n    // BAD: CORS is controlled by user\n    const server_2 = new ApolloServer({\n        cors: { origin: user_origin }\n    });\n});\n```\nTo fix these issues, `server_1` uses a restrictive CORS configuration that is not vulnerable to CSRF attacks. `server_2` properly validates user-controlled data against a whitelist before using it.\n\n\n```javascript\nimport { ApolloServer } from 'apollo-server';\nvar https = require('https'),\n    url = require('url');\n\nvar server = https.createServer(function () { });\n\nserver.on('request', function (req, res) {\n    // GOOD: origin is restrictive\n    const server_1 = new ApolloServer({\n        cors: { origin: false }\n    });\n\n    let user_origin = url.parse(req.url, true).query.origin;\n    // GOOD: user data is properly sanitized\n    const server_2 = new ApolloServer({\n        cors: { origin: (user_origin === \"https://allowed1.com\" || user_origin === \"https://allowed2.com\") ? user_origin : false }\n    });\n});\n```\n\n## References\n* Mozilla Developer Network: [CORS, Access-Control-Allow-Origin](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin).\n* W3C: [CORS for developers, Advice for Resource Owners](https://w3c.github.io/webappsec-cors-for-developers/#resources).\n* Common Weakness Enumeration: [CWE-942](https://cwe.mitre.org/data/definitions/942.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"6d21c6eb17f73aecd0ad2db6cbc9b1ec259eec0d","message":{"text":"CORS Origin allows broad access due to permissive or user controlled value."},"location":{"path":"src/services/api/cors.ts","start_line":6,"end_line":6,"start_column":11,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/betagouv/france-chaleur-urbaine/code-scanning/alerts/29/instances","dismissal_approved_by":null},{"number":27,"created_at":"2025-09-08T14:05:51Z","updated_at":"2025-09-08T14:05:51Z","url":"https://api.github.com/repos/betagouv/france-chaleur-urbaine/code-scanning/alerts/27","html_url":"https://github.com/betagouv/france-chaleur-urbaine/security/code-scanning/27","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"6d21c6eb17f73aecd0ad2db6cbc9b1ec259eec0d","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"},"location":{"path":".github/workflows/ci.yml","start_line":9,"end_line":64,"start_column":5,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/betagouv/france-chaleur-urbaine/code-scanning/alerts/27/instances","dismissal_approved_by":null}]}]}