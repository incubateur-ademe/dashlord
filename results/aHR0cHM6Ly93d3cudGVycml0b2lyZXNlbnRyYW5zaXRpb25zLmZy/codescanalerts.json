{"totalCount":30,"grade":"F","repositories":[{"url":"https://github.com/incubateur-ademe/territoires-en-transitions","grade":"F","alerts":[{"number":104,"created_at":"2025-10-09T09:29:57Z","updated_at":"2025-10-09T09:29:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/104","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/104","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-system-race","severity":"warning","description":"Potential file system race condition","name":"js/file-system-race","tags":["external/cwe/cwe-367","security"],"full_description":"Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.","help":"# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"The file may have changed since it was checked."},"location":{"path":"apps/site/app/ressources/page.tsx","start_line":51,"end_line":51,"start_column":26,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/104/instances","dismissal_approved_by":null},{"number":103,"created_at":"2025-10-09T09:29:57Z","updated_at":"2025-10-09T09:29:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/103","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/103","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"The URL of this request depends on a user-provided value.\nThe URL of this request depends on a user-provided value.\nThe URL of this request depends on a user-provided value."},"location":{"path":"apps/site/app/collectivites/utils.ts","start_line":64,"end_line":67,"start_column":28,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/103/instances","dismissal_approved_by":null},{"number":102,"created_at":"2025-10-09T09:29:57Z","updated_at":"2025-10-09T09:29:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/102","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/102","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurrences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"apps/backend/src/utils/excel/export-excel.utils.ts","start_line":216,"end_line":216,"start_column":13,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/102/instances","dismissal_approved_by":null},{"number":101,"created_at":"2025-10-09T09:29:57Z","updated_at":"2025-10-09T09:29:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/101","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/101","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/double-escaping","severity":"warning","description":"Double escaping or unescaping","name":"js/double-escaping","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-116","security"],"full_description":"When escaping special characters using a meta-character like backslash or ampersand, the meta-character has to be escaped first to avoid double-escaping, and conversely it has to be unescaped last to avoid double-unescaping.","help":"# Double escaping or unescaping\nEscaping meta-characters in untrusted input is an important technique for preventing injection attacks such as cross-site scripting. One particular example of this is HTML entity encoding, where HTML special characters are replaced by HTML character entities to prevent them from being interpreted as HTML markup. For example, the less-than character is encoded as `&lt;` and the double-quote character as `&quot;`. Other examples include backslash-escaping for including untrusted data in string literals and percent-encoding for URI components.\n\nThe reverse process of replacing escape sequences with the characters they represent is known as unescaping.\n\nNote that the escape characters themselves (such as ampersand in the case of HTML encoding) play a special role during escaping and unescaping: they are themselves escaped, but also form part of the escaped representations of other characters. Hence care must be taken to avoid double escaping and unescaping: when escaping, the escape character must be escaped first, when unescaping it has to be unescaped last.\n\nIf used in the context of sanitization, double unescaping may render the sanitization ineffective. Even if it is not used in a security-critical context, it may still result in confusing or garbled output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation. For URI encoding, you can use the standard `encodeURIComponent` and `decodeURIComponent` functions.\n\nOtherwise, make sure to always escape the escape character first, and unescape it last.\n\n\n## Example\nThe following example shows a pair of hand-written HTML encoding and decoding functions:\n\n\n```javascript\nmodule.exports.encode = function(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&apos;\");\n};\n\nmodule.exports.decode = function(s) {\n  return s.replace(/&amp;/g, \"&\")\n          .replace(/&quot;/g, \"\\\"\")\n          .replace(/&apos;/g, \"'\");\n};\n\n```\nThe encoding function correctly handles ampersand before the other characters. For example, the string `me & \"you\"` is encoded as `me &amp; &quot;you&quot;`, and the string `&quot;` is encoded as `&amp;quot;`.\n\nThe decoding function, however, incorrectly decodes `&amp;` into `&` before handling the other characters. So while it correctly decodes the first example above, it decodes the second example (`&amp;quot;`) to `\"` (a single double quote), which is not correct.\n\nInstead, the decoding function should decode the ampersand last:\n\n\n```javascript\nmodule.exports.encode = function(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&apos;\");\n};\n\nmodule.exports.decode = function(s) {\n  return s.replace(/&quot;/g, \"\\\"\")\n          .replace(/&apos;/g, \"'\")\n          .replace(/&amp;/g, \"&\");\n};\n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [html-entities](https://www.npmjs.com/package/html-entities) package.\n* npm: [js-string-escape](https://www.npmjs.com/package/js-string-escape) package.\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"This replacement may produce '&' characters that are double-unescaped here."},"location":{"path":"apps/backend/src/utils/excel/export-excel.utils.ts","start_line":220,"end_line":220,"start_column":13,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/101/instances","dismissal_approved_by":null},{"number":100,"created_at":"2025-10-09T09:29:57Z","updated_at":"2025-10-09T09:29:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/100","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/100","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stored-xss","severity":"error","description":"Stored cross-site scripting","name":"js/stored-xss","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Using uncontrolled stored values in HTML allows for a stored cross-site scripting vulnerability.","help":"# Stored cross-site scripting\nDirectly using uncontrolled stored value (for example, file names) to create HTML content without properly sanitizing the input first, allows for a cross-site scripting vulnerability.\n\nThis kind of vulnerability is also called *stored* cross-site scripting, to distinguish it from other types of cross-site scripting.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before using uncontrolled stored values to create HTML content, or one of the other solutions that are mentioned in the references.\n\n\n## Example\nThe following example code writes file names directly to a HTTP response. This leaves the website vulnerable to cross-site scripting, if an attacker can choose the file names on the disk.\n\n\n```javascript\nvar express = require('express'),\n    fs = require('fs');\n\nexpress().get('/list-directory', function(req, res) {\n    fs.readdir('/public', function (error, fileNames) {\n        var list = '<ul>';\n        fileNames.forEach(fileName => {\n            // BAD: `fileName` can contain HTML elements\n            list += '<li>' + fileName + '</li>';\n        });\n        list += '</ul>'\n        res.send(list);\n    });\n});\n\n```\nSanitizing the file names prevents the vulnerability:\n\n\n```javascript\nvar express = require('express'),\n    fs = require('fs'),\n    escape = require('escape-html');\n\nexpress().get('/list-directory', function(req, res) {\n    fs.readdir('/public', function (error, fileNames) {\n        var list = '<ul>';\n        fileNames.forEach(fileName => {\n            // GOOD: escaped `fileName` can not contain HTML elements\n            list += '<li>' + escape(fileName) + '</li>';\n        });\n        list += '</ul>'\n        res.send(list);\n    });\n});\n\n```\n\n## References\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Stored cross-site scripting vulnerability due to stored value."},"location":{"path":"apps/site/app/ressources/page.tsx","start_line":114,"end_line":114,"start_column":23,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/100/instances","dismissal_approved_by":null},{"number":99,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/99","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/99","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/code-injection/medium","severity":"warning","description":"Code injection","name":"actions/code-injection/medium","tags":["actions","external/cwe/cwe-094","external/cwe/cwe-095","external/cwe/cwe-116","security"],"full_description":"Interpreting unsanitized user input as code allows a malicious user to perform arbitrary code execution.","help":"## Overview\n\nUsing user-controlled input in GitHub Actions may lead to code injection in contexts like _run:_ or _script:_.\n\nCode injection in GitHub Actions may allow an attacker to exfiltrate any secrets used in the workflow and the temporary GitHub repository authorization token. The token may have write access to the repository, allowing an attacker to make changes to the repository.\n\n## Recommendation\n\nThe best practice to avoid code injection vulnerabilities in GitHub workflows is to set the untrusted input value of the expression to an intermediate environment variable and then use the environment variable using the native syntax of the shell/script interpreter (that is, not _${{ env.VAR }}_).\n\nIt is also recommended to limit the permissions of any tokens used by a workflow such as the GITHUB_TOKEN.\n\n## Example\n\n### Incorrect Usage\n\nThe following example lets attackers inject an arbitrary shell command:\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          echo '${{ github.event.comment.body }}'\n```\n\nThe following example uses an environment variable, but **still allows the injection** because of the use of expression syntax:\n\n```yaml\non: issue_comment\n\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n    -  env:\n        BODY: ${{ github.event.issue.body }}\n      run: |\n        echo '${{ env.BODY }}'\n```\n\n### Correct Usage\n\nThe following example uses shell syntax to read the environment variable and will prevent the attack:\n\n```yaml\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n      - env:\n          BODY: ${{ github.event.issue.body }}\n        run: |\n          echo \"$BODY\"\n```\n\nThe following example uses `process.env` to read environment variables within JavaScript code.\n\n```yaml\njobs:\n  echo-body:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: uses: actions/github-script@v4\n        env:\n          BODY: ${{ github.event.issue.body }}\n        with:\n          script: |\n            const { BODY } = process.env\n            ...\n```\n\n## References\n\n- GitHub Security Lab Research: [Keeping your GitHub Actions and workflows secure: Untrusted input](https://securitylab.github.com/research/github-actions-untrusted-input).\n- GitHub Docs: [Security hardening for GitHub Actions](https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions).\n- GitHub Docs: [Permissions for the GITHUB_TOKEN](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Potential code injection in ${{ github.event.pull_request.head.ref }}, which may be controlled by an external user."},"location":{"path":".github/workflows/cd-test-app-destroy.yml","start_line":26,"end_line":30,"start_column":9,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/99/instances","dismissal_approved_by":null},{"number":98,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/98","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/98","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'jwalton/gh-docker-logs' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":511,"end_line":511,"start_column":15,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/98/instances","dismissal_approved_by":null},{"number":97,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/97","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/97","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Markdowns to JSONs' step Uses Step uses 'EndBug/add-and-commit' with ref 'v7', not a pinned commit hash"},"location":{"path":".github/workflows/update-content.yml","start_line":52,"end_line":52,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/97/instances","dismissal_approved_by":null},{"number":96,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/96","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/96","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'cypress-io/github-action' with ref 'v5', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":492,"end_line":492,"start_column":15,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/96/instances","dismissal_approved_by":null},{"number":95,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/95","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/95","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Markdowns to JSONs' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/update-content.yml","start_line":21,"end_line":21,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/95/instances","dismissal_approved_by":null},{"number":94,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/94","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/94","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Markdowns to JSONs' step Uses Step uses 'earthly/actions-setup' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/update-content.yml","start_line":18,"end_line":18,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/94/instances","dismissal_approved_by":null},{"number":93,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/93","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/93","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":458,"end_line":458,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/93/instances","dismissal_approved_by":null},{"number":92,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/92","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/92","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'earthly/actions-setup' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":455,"end_line":455,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/92/instances","dismissal_approved_by":null},{"number":91,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/91","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/91","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":402,"end_line":402,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/91/instances","dismissal_approved_by":null},{"number":90,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/90","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/90","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'earthly/actions-setup' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":399,"end_line":399,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/90/instances","dismissal_approved_by":null},{"number":89,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/89","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/89","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":351,"end_line":351,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/89/instances","dismissal_approved_by":null},{"number":88,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/88","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/88","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'earthly/actions-setup' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":348,"end_line":348,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/88/instances","dismissal_approved_by":null},{"number":87,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/87","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/87","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":325,"end_line":325,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/87/instances","dismissal_approved_by":null},{"number":86,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/86","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/86","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'earthly/actions-setup' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":322,"end_line":322,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/86/instances","dismissal_approved_by":null},{"number":85,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/85","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/85","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'earthly/actions-setup' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":302,"end_line":302,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/85/instances","dismissal_approved_by":null},{"number":84,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/84","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/84","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'pnpm/action-setup' with ref 'v4', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":258,"end_line":258,"start_column":15,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/84/instances","dismissal_approved_by":null},{"number":83,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/83","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/83","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":221,"end_line":221,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/83/instances","dismissal_approved_by":null},{"number":82,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/82","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/82","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'earthly/actions-setup' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":218,"end_line":218,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/82/instances","dismissal_approved_by":null},{"number":81,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/81","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/81","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":165,"end_line":165,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/81/instances","dismissal_approved_by":null},{"number":80,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/80","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/80","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'earthly/actions-setup' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":162,"end_line":162,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/80/instances","dismissal_approved_by":null},{"number":79,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/79","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/79","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'test-api' step Uses Step uses 'denoland/setup-deno' with ref 'v2', not a pinned commit hash"},"location":{"path":".github/workflows/test-api.yml","start_line":22,"end_line":22,"start_column":15,"end_column":37},"classifications":["test"]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/79/instances","dismissal_approved_by":null},{"number":78,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/78","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/78","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":108,"end_line":108,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/78/instances","dismissal_approved_by":null},{"number":77,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/77","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/77","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'earthly/actions-setup' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":105,"end_line":105,"start_column":15,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/77/instances","dismissal_approved_by":null},{"number":76,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/76","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/76","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Dev utils' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/dev.yml","start_line":65,"end_line":65,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/76/instances","dismissal_approved_by":null},{"number":75,"created_at":"2025-10-09T09:28:57Z","updated_at":"2025-10-09T09:28:57Z","url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/75","html_url":"https://github.com/incubateur-ademe/territoires-en-transitions/security/code-scanning/75","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"f7f151eabc81e28aceb2429bc3e68d007a269e3a","message":{"text":"Unpinned 3rd party Action 'Intégration continue' step Uses Step uses 'supabase/setup-cli' with ref 'v1', not a pinned commit hash"},"location":{"path":".github/workflows/ci-v1.yml","start_line":70,"end_line":70,"start_column":15,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/incubateur-ademe/territoires-en-transitions/code-scanning/alerts/75/instances","dismissal_approved_by":null}]}]}